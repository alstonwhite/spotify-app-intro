[{"C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\index.js":"1","C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\App.js":"2","C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\reportWebVitals.js":"3","C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\components\\Player.js":"4","C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\components\\IndieCalc.js":"5","C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\components\\BoilerRoom.js":"6","C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\components\\Listmas.js":"7","C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\components\\Compatibility.js":"8"},{"size":500,"mtime":1607961295612,"results":"9","hashOfConfig":"10"},{"size":1203,"mtime":1610926524050,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1607961295612,"results":"12","hashOfConfig":"10"},{"size":951,"mtime":1610337712621,"results":"13","hashOfConfig":"10"},{"size":3523,"mtime":1610336734495,"results":"14","hashOfConfig":"10"},{"size":3075,"mtime":1610591044578,"results":"15","hashOfConfig":"10"},{"size":2897,"mtime":1610925589944,"results":"16","hashOfConfig":"10"},{"size":3583,"mtime":1610938777508,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1av5neg",{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\index.js",[],["38","39"],"C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\App.js",["40","41","42","43","44"],"C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\reportWebVitals.js",[],"C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\components\\Player.js",["45","46"],"import React, {useState, useEffect} from 'react'\r\n\r\nimport SpotifyWebApi from 'spotify-web-api-js';\r\n\r\n\r\nconst Player = () => {\r\n\r\n    const spotifyWebApi = new SpotifyWebApi();\r\n\r\n    const [nowPlaying, setNowPlaying] = useState({name: 'Not Checked', image: ''});\r\n\r\n    const getNowPlaying = () => {\r\n        spotifyWebApi.getMyCurrentPlaybackState().then((response => {\r\n          console.log('spotify web api reponse:')  \r\n          console.log(response)\r\n            setNowPlaying({\r\n              name: response.item.name,\r\n              image: response.item.album.images[0].url\r\n          })\r\n        }))\r\n    }\r\n\r\n\r\n    return (\r\n    <div>\r\n      <div>\r\n        Now Playing: {nowPlaying.name}\r\n      </div>\r\n      <div>\r\n        <img src={nowPlaying.image} style={{width: 100}}/>\r\n      </div>\r\n      <button onClick={() => getNowPlaying()}>\r\n        Check Now Playing\r\n      </button>\r\n    </div>\r\n    );\r\n};\r\n    \r\n    export default Player;","C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\components\\IndieCalc.js",["47"],"import React, {useState, useEffect} from 'react'\r\n\r\nimport SpotifyWebApi from 'spotify-web-api-js';\r\n\r\n\r\nconst IndieCalc = () => {\r\n\r\n    const spotifyWebApi = new SpotifyWebApi();\r\n\r\n    const [listenParams, setListenParams] = useState(null);\r\n    const [timeParams, setTimeParams] = useState(null);\r\n    const [topListens, setTopListens] = useState([]);\r\n\r\n    const getTopListens = (listenParams, timeParams) => {\r\n        if(listenParams === 'songs') {\r\n          spotifyWebApi.getMyTopTracks({limit: 50, time_range: timeParams}).then((response => {\r\n    \r\n            setTopListens(response.items);\r\n          }));\r\n        } else {\r\n          console.log('fetching artists')\r\n          spotifyWebApi.getMyTopArtists({limit: 50, time_range: timeParams}).then((response => {\r\n            setTopListens(response.items);\r\n          }));\r\n        }\r\n    }\r\n\r\n    const calcAvg = (topListens) => {\r\n    let weightAvg = parseInt(topListens.reduce((acc, cur, i) => acc + cur.popularity * (50-i), 0)) / 1275;\r\n    let avg = parseInt(topListens.reduce((acc, cur) => acc + cur.popularity, 0)) / 50;\r\n    console.log(\"weight avg:\");\r\n    console.log(weightAvg);\r\n    console.log(\"avg:\");\r\n    console.log(avg);\r\n    }  \r\n\r\n    return (\r\n    <div>\r\n      <h1>how ~indie~ r u ?</h1>\r\n      <p>based on ur</p>\r\n      <div>\r\n        <input type=\"radio\" id=\"songs\" name=\"selection1\" value=\"songs\" \r\n          onChange={(e)=>setListenParams(e.target.value)}/>\r\n        <label for=\"songs\">songs</label>\r\n        <input type=\"radio\" id=\"artists\" name=\"selection1\" value=\"artists\"\r\n          onChange={(e)=>setListenParams(e.target.value)}/>\r\n        <label for=\"artists\">artists</label>\r\n      </div>\r\n      <p>from</p>\r\n      <div>\r\n        <input type=\"radio\" id=\"short_term\" name=\"selection2\" value=\"short_term\"\r\n          onChange={(e)=>setTimeParams(e.target.value)}/>\r\n        <label for=\"short_term\">recently</label>\r\n        <input type=\"radio\" id=\"medium_term\" name=\"selection2\" value=\"medium_term\"\r\n          onChange={(e)=>setTimeParams(e.target.value)}/>\r\n        <label for=\"medium_term\">in the middle</label>\r\n        <input type=\"radio\" id=\"long_term\" name=\"selection2\" value=\"long_term\"\r\n          onChange={(e)=>setTimeParams(e.target.value)}/>\r\n        <label for=\"long_term\">lifetime</label>\r\n      </div>\r\n      <button onClick={() => getTopListens(listenParams, timeParams)}>\r\n        show me\r\n      </button>\r\n      <button onClick={() => calcAvg(topListens)}>\r\n        calc\r\n      </button>\r\n\r\n      {listenParams==='songs' ? \r\n        <table>\r\n        <thead>\r\n          <tr>\r\n            <th>song</th>\r\n            <th>artist</th>\r\n            <th>ur listens</th>\r\n            <th>popularity</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {topListens.map((song,i) => \r\n          <tr>\r\n            <td>{song.name}</td>\r\n            <td>{song.artists[0].name}</td>\r\n            <td>{i+1}</td>\r\n            <td>{song.popularity}</td>\r\n          </tr>\r\n          )}\r\n        </tbody>\r\n      </table> :\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>artist</th>\r\n            <th>ur listens</th>\r\n            <th>popularity</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {topListens.map((artist,i) => \r\n          <tr>\r\n            <td>{artist.name}</td>\r\n            <td>{i+1}</td>\r\n            <td>{artist.popularity}</td>\r\n          </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      }\r\n    </div>\r\n    );\r\n};\r\n    \r\n    export default IndieCalc;","C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\components\\BoilerRoom.js",["48","49","50"],"import React, {useState, useEffect} from 'react'\r\n\r\nimport SpotifyWebApi from 'spotify-web-api-js';\r\n\r\n\r\nconst BoilerRoom = () => {\r\n\r\n    const spotifyWebApi = new SpotifyWebApi();\r\n\r\n    const [playlists, setPlaylists] = useState([]);\r\n    const [playlistTracks, setPlaylistTracks] = useState([]);\r\n    const [trackDetails, setTrackDetails] = useState(null);\r\n\r\n    const getUser = () => {\r\n        spotifyWebApi.getMe().then((response => {\r\n          return response.id\r\n        }))\r\n    }\r\n    \r\n    const getPlaylists = () => {\r\n        // add options (number of playlists, etc)\r\n        spotifyWebApi.getUserPlaylists('awhite45',{limit: 25}).then(response => {\r\n          setPlaylists([...response.items]);\r\n        })\r\n    }\r\n\r\n    const getPlaylistTracks = (id) => {\r\n        // add options (number of songs, etc)\r\n        spotifyWebApi.getPlaylistTracks('awhite45', id).then(response => {\r\n            console.log(response.items)\r\n            setPlaylistTracks(response.items);\r\n        })\r\n    }\r\n\r\n    const getTrack = (id) => {\r\n        // add options (number of songs, etc)\r\n        spotifyWebApi.getTrack(id).then(response => {\r\n            console.log(response)            \r\n            // setTrack(response);\r\n        })\r\n    }\r\n\r\n    const getTrackAudioFeatures = (id) => {\r\n        // add options (number of songs, etc)\r\n        spotifyWebApi.getAudioFeaturesForTrack(id).then(response => {\r\n            // console.log(response)            \r\n            setTrackDetails(response);\r\n        })\r\n    }\r\n    \r\n    return (\r\n    <div className=\"boiler\">\r\n        <div className=\"boiler-selections\">\r\n            <button onClick={() => getPlaylists()}>\r\n                Check User's Playlists\r\n            </button>\r\n            <button onClick={() => getPlaylistTracks('565yRrbI6RtIuKZhgAcNnX')}>\r\n                get songs example\r\n            </button>\r\n        </div>\r\n        <div className='boiler-playlists'>\r\n            {playlists[0] && playlists.map(playlist => \r\n                <button \r\n                    value={playlist.id}\r\n                    onClick={e => getPlaylistTracks(e.target.value)}\r\n                >\r\n                    {playlist.name}\r\n                </button>\r\n            )}  \r\n        </div>\r\n        <div className='boiler-tracks'>\r\n            {playlistTracks[0] && playlistTracks.map(track => \r\n                <div>\r\n                    <button\r\n                        value={track.track.id}\r\n                        onClick={e => getTrackAudioFeatures(e.target.value)}\r\n                    >\r\n                        {track.track.name} - {track.track.artists[0].name}\r\n                    </button>\r\n                </div>\r\n            )}  \r\n        </div>\r\n        <div className='boiler-track-detail'>\r\n            {trackDetails && Object.keys(trackDetails).map(key => \r\n                <div>\r\n                    {key}: {trackDetails[key]}\r\n                </div>\r\n            )}  \r\n        </div>\r\n        {/* add see more button (calls again with offset) */}\r\n    </div>\r\n    );\r\n};\r\n    \r\nexport default BoilerRoom;","C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\components\\Listmas.js",["51"],"C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\components\\Compatibility.js",["52","53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":6,"column":8,"nodeType":"60","messageId":"61","endLine":6,"endColumn":14},{"ruleId":"58","severity":1,"message":"62","line":7,"column":8,"nodeType":"60","messageId":"61","endLine":7,"endColumn":17},{"ruleId":"58","severity":1,"message":"63","line":8,"column":8,"nodeType":"60","messageId":"61","endLine":8,"endColumn":18},{"ruleId":"58","severity":1,"message":"64","line":9,"column":8,"nodeType":"60","messageId":"61","endLine":9,"endColumn":15},{"ruleId":"65","severity":1,"message":"66","line":20,"column":13,"nodeType":"67","messageId":"68","endLine":20,"endColumn":26},{"ruleId":"58","severity":1,"message":"69","line":1,"column":26,"nodeType":"60","messageId":"61","endLine":1,"endColumn":35},{"ruleId":"70","severity":1,"message":"71","line":30,"column":9,"nodeType":"72","endLine":30,"endColumn":59},{"ruleId":"58","severity":1,"message":"69","line":1,"column":26,"nodeType":"60","messageId":"61","endLine":1,"endColumn":35},{"ruleId":"58","severity":1,"message":"69","line":1,"column":26,"nodeType":"60","messageId":"61","endLine":1,"endColumn":35},{"ruleId":"58","severity":1,"message":"73","line":14,"column":11,"nodeType":"60","messageId":"61","endLine":14,"endColumn":18},{"ruleId":"58","severity":1,"message":"74","line":35,"column":11,"nodeType":"60","messageId":"61","endLine":35,"endColumn":19},{"ruleId":"58","severity":1,"message":"69","line":1,"column":26,"nodeType":"60","messageId":"61","endLine":1,"endColumn":35},{"ruleId":"58","severity":1,"message":"75","line":10,"column":12,"nodeType":"60","messageId":"61","endLine":10,"endColumn":16},{"ruleId":"58","severity":1,"message":"76","line":10,"column":18,"nodeType":"60","messageId":"61","endLine":10,"endColumn":25},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'Player' is defined but never used.","Identifier","unusedVar","'IndieCalc' is defined but never used.","'BoilerRoom' is defined but never used.","'Listmas' is defined but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'getUser' is assigned a value but never used.","'getTrack' is assigned a value but never used.","'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]