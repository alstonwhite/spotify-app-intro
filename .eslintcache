[{"C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\index.js":"1","C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\App.js":"2","C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":1607961295612,"results":"4","hashOfConfig":"5"},{"size":5732,"mtime":1609988337103,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1607961295612,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1av5neg",{"filePath":"11","messages":"12","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\index.js",[],["16","17"],"C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\App.js",["18","19","20","21"],"import React, {useState, useEffect} from 'react'\nimport './App.css';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\n\nfunction App() {\n\n  const spotifyWebApi = new SpotifyWebApi();\n\n  function getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  const params = getHashParams();\n  const loggedIn = params.access_token ? true : false;\n  const [nowPlaying, setNowPlaying] = useState({name: 'Not Checked', image: ''});\n  const [topListens, setTopListens] = useState([]);\n  \n  const [listenParams, setListenParams] = useState(null);\n  const [timeParams, setTimeParams] = useState(null);\n\n\n  if(params.access_token) {\n    spotifyWebApi.setAccessToken(params.access_token);\n  }\n\n  const getNowPlaying = () => {\n    spotifyWebApi.getMyCurrentPlaybackState().then((response => {\n      console.log('spotify web api reponse:')  \n      console.log(response)\n        setNowPlaying({\n          name: response.item.name,\n          image: response.item.album.images[0].url\n      })\n    }))\n  }\n\n  const getTopSongs = () => {\n    spotifyWebApi.getMyTopTracks({limit: 50, time_range: 'short_term'}).then((response => {\n      console.log('spotify web api reponse:');\n      console.log(response.items);\n      setTopListens(response.items);\n    }));\n  }\n\n  const getTopListens = (listenParams, timeParams) => {\n    // console.log(listenParams)\n    // console.log(timeParams)\n    if(listenParams === 'songs') {\n      // console.log('fetching songs')\n      spotifyWebApi.getMyTopTracks({limit: 50, time_range: timeParams}).then((response => {\n        // console.log('spotify web api reponse:');\n        // console.log(response.items);\n        setTopListens(response.items);\n      }));\n    } else {\n      console.log('fetching artists')\n      spotifyWebApi.getMyTopArtists({limit: 50, time_range: timeParams}).then((response => {\n        // console.log('spotify web api reponse:');\n        // console.log(response.items);\n        setTopListens(response.items);\n      }));\n    }\n  }\n\n  const calcAvg = (topListens) => {\n    // console.log(topListens);\n    let weightAvg = parseInt(topListens.reduce((acc, cur, i) => acc + cur.popularity * (50-i), 0)) / 1275;\n    let avg = parseInt(topListens.reduce((acc, cur) => acc + cur.popularity, 0)) / 50;\n    console.log(\"weight avg:\");\n    console.log(weightAvg);\n    console.log(\"avg:\");\n    console.log(avg);\n  }\n\n  return (\n    <div className=\"App\">\n      <a href='http://localhost:8888'> \n        <button>Log in with Spotify</button>\n      </a>\n      <div>\n        Logged In: {loggedIn ? 'Yes' : 'No'}\n      </div>\n      {/* <div>\n        Now Playing: {nowPlaying.name}\n      </div>\n      <div>\n        <img src={nowPlaying.image} style={{width: 100}}/>\n      </div>\n      <button onClick={() => getNowPlaying()}>\n        Check Now Playing\n      </button> */}\n      <h1>how deep r u ?</h1>\n      <p>based on ur</p>\n      <div>\n        <input type=\"radio\" id=\"songs\" name=\"selection1\" value=\"songs\" \n          onChange={(e)=>setListenParams(e.target.value)}/>\n        <label for=\"songs\">songs</label>\n        <input type=\"radio\" id=\"artists\" name=\"selection1\" value=\"artists\"\n          onChange={(e)=>setListenParams(e.target.value)}/>\n        <label for=\"artists\">artists</label>\n      </div>\n      <p>from</p>\n      <div>\n        <input type=\"radio\" id=\"short_term\" name=\"selection2\" value=\"short_term\"\n          onChange={(e)=>setTimeParams(e.target.value)}/>\n        <label for=\"short_term\">recently</label>\n        <input type=\"radio\" id=\"medium_term\" name=\"selection2\" value=\"medium_term\"\n          onChange={(e)=>setTimeParams(e.target.value)}/>\n        <label for=\"medium_term\">in the middle</label>\n        <input type=\"radio\" id=\"long_term\" name=\"selection2\" value=\"long_term\"\n          onChange={(e)=>setTimeParams(e.target.value)}/>\n        <label for=\"long_term\">lifetime</label>\n      </div>\n      <button onClick={() => getTopListens(listenParams, timeParams)}>\n        show me\n      </button>\n      <button onClick={() => getTopSongs()}>\n        show me (top songs)\n      </button>\n      <button onClick={() => calcAvg(topListens)}>\n        calc\n      </button>\n\n      {listenParams==='songs' ? \n        <table>\n        <thead>\n          <tr>\n            <th>song</th>\n            <th>artist</th>\n            <th>ur listens</th>\n            <th>popularity</th>\n          </tr>\n        </thead>\n        <tbody>\n          {topListens.map((song,i) => \n          <tr>\n            <td>{song.name}</td>\n            <td>{song.artists[0].name}</td>\n            <td>{i+1}</td>\n            <td>{song.popularity}</td>\n          </tr>\n          )}\n        </tbody>\n      </table> :\n      <table>\n        <thead>\n          <tr>\n            <th>artist</th>\n            <th>ur listens</th>\n            <th>popularity</th>\n          </tr>\n        </thead>\n        <tbody>\n          {topListens.map((artist,i) => \n          <tr>\n            <td>{artist.name}</td>\n            <td>{i+1}</td>\n            <td>{artist.popularity}</td>\n          </tr>\n          )}\n        </tbody>\n      </table>\n      }\n\n      {/* <table>\n        <thead>\n          <tr>\n            <th>song</th>\n            <th>artist</th>\n            <th>ur listens</th>\n            <th>popularity</th>\n          </tr>\n        </thead>\n        <tbody>\n          {topListens.map((song,i) => \n          <tr>\n            <td>{song.name}</td>\n            <td>{song.artists[0].name}</td>\n            <td>{i+1}</td>\n            <td>{song.popularity}</td>\n          </tr>\n          )}\n        </tbody>\n      </table> */}\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\alston.white\\spotify-api-intro\\client\\src\\reportWebVitals.js",[],{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":1,"column":26,"nodeType":"28","messageId":"29","endLine":1,"endColumn":35},{"ruleId":"30","severity":1,"message":"31","line":14,"column":13,"nodeType":"32","messageId":"33","endLine":14,"endColumn":26},{"ruleId":"26","severity":1,"message":"34","line":22,"column":10,"nodeType":"28","messageId":"29","endLine":22,"endColumn":20},{"ruleId":"26","severity":1,"message":"35","line":33,"column":9,"nodeType":"28","messageId":"29","endLine":33,"endColumn":22},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'nowPlaying' is assigned a value but never used.","'getNowPlaying' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]